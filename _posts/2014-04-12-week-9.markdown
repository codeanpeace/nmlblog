---
layout: post
title:  "Week 9: Blinking Lights & Switches"
date:   2014-04-12 12:40:46
categories:
---

### Arduino Platform
1. Hardware: Arduino board
  - 14 Digital IO pins (pins 0-13)
  - 6 Analogue In pins (pins 0-5)
  - 6 Analogue Out pins (pins 3, 5, 6, 9, 10, 11)
2. Software: Arduino IDE
  - select serial port /dev/tty.usbmodem________

### Arduino Interaction
- Sensors sense/perceive input from the world (hardware)
- Behavior (software)
- Actuators act/react output to the world (hardware)

    // Example 01 : Blinking LED

    const int LED = 13; // LED connected to
                        // digital pin 13

    void setup() {
      pinMode(LED, OUTPUT);   // sets the digital
                              // pin as output
    }

    void loop() {
      digitalWrite(LED, HIGH);    // turns the LED on, output pins ~ power sockets
      delay(100);                 // waits for a second
      digitalWrite(LED, LOW);     // turns the LED off
      delay(1000);                // waits for a second
    }
    // Getting Started with Arduino

### What Is Electricity?
In a snapshot in time of a circuit, current is the same across circuit whereas voltage drops throughout the circuit
  - voltage (volts) ~ water pressure
  - current (amperes) ~ flow rate
  - resistance (ohms) ~ friction
  - variable resistor ~ valve directly affecting resistance

    // Example 03C: Turn on LED when the button is pressed
    // and keep it on after it is released
    // including simple de-bouncing
    // Now with another new and improved formula!!

    const int LED = 13;   // the pin for the LED
    const int BUTTON = 7; // the input pin where the
                          // pushbutton is connected

    int val = 0;     // val will be used to store the state
                     // of the input pin
    int old_val = 0; // this variable stores the previous
                     // value of "val"
    int state = 0;   // 0 = LED off and 1 = LED on

    void setup() {
      pinMode(LED, OUTPUT);   // tell Arduino LED is an output
      pinMode(BUTTON, INPUT); // and BUTTON is an input
    }

    void loop(){
      val = digitalRead(BUTTON); // read input value and store it
                                 // yum, fresh

      // check if there was a transition
      if ((val == HIGH) && (old_val == LOW)){
        state = 1 - state;
        delay(10);
      }
      old_val = val; // val is now old, let's store it
      if (state == 1) {
        digitalWrite(LED, HIGH); // turn LED ON
      }
      else {
        digitalWrite(LED, LOW);
      }
    }
    // Getting Started with Arduino

### Advanced Input and Output

#### Digital Sensors
- Switches
- Thermostats
- Magnetic Switches
- Carpet Switches
- Tilt Switches

#### Pulse Width Modulation (PWM) aka Spoofing Analog
Playing with the ratio of on and off positions can let digital output mimic the intensity gradient in analog output.
  - pulsing/breathing lights
  - varying motor speeds

    // Example 04: Fade an LED in and out like on
    // a sleeping Apple computer

    const int LED = 9; // the pin for the LED
    int i = 0;         // Weâ€™ll use this to count up and down

    void setup() {
      pinMode(LED, OUTPUT); // tell Arduino LED is an output
    }
    void loop(){

      for (i = 0; i < 255; i++) { // loop from 0 to 254 (fade in)

        analogWrite(LED, i); // set the LED brightness
        delay(10);           // Wait 10ms because analogWrite
                             // is instantaneous and we would
                             // not see any change
      }

      for (i = 255; i > 0; i--) { // loop from 255 to 1 (fade out)

        analogWrite(LED, i); // set the LED brightness
        delay(10);           // Wait 10ms
      }
    }
    // Getting Started with Arduino

#### Analog Input & Serial Monitor
Using analogRead() instead of digitalRead() returns a gradient rather than binary result reflecting the voltage read.
The built-in Serial Monitor serves as a console that helps in developing and debugging.
    Serial.begin(9600); // initialize in setup()
    Serial.println(val); // prints the value to the serial port
MOSFET extends the capabilities of Arduino by serving as an intermediary electronic switch conductor capable of driving bigger loads.
Complex sensors produce information that need more than a digitalRead or analogRead and are thus pre-processed by small microcontrollers in the circuit.

<iframe src="//player.vimeo.com/video/92609021" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> <p><a href="http://vimeo.com/92609021">Sleepy Light Breathing</a> from <a href="http://vimeo.com/user4315024">Harrison Tan</a> on <a href="https://vimeo.com">Vimeo</a>.</p> <p>Photoresistor controls the rate at which the light breathes.</p>